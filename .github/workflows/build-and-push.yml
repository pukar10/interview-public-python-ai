name: Build and Push to GHCR

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - name: python-ai-frontend
            context: ./frontend
            dockerfile: ./frontend/Dockerfile
          - name: python-ai-backend
            context: ./backend
            dockerfile: ./backend/Dockerfile

    steps:
      # 1) checkout branch onto runner
      - name: Checkout
        uses: actions/checkout@v4

      # Set variable owner_lc
      - name: Lowercase owner (GHCR requires lowercase)
        id: repo
        run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      # 2) setup qumu and buildx on runner
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # 3) login running to GHCR (docker login ghcr.io -u <your-username> -p <one-time-GitHub-token>)
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4) Prepare image names/tags
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_lc }}/${{ matrix.name }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha

      # 5) Build and Push
      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}