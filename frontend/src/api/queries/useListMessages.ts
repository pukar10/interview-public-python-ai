/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { ListMessagesQueryResponse, ListMessagesPathParams, ListMessagesQueryParams, ListMessages422 } from "../types/ListMessages.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { listMessages } from "../client/listMessages.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const listMessagesQueryKey = (conversation_id: ListMessagesPathParams["conversation_id"], params?: ListMessagesQueryParams) => [{ url: '/conversations/:conversation_id/messages/', params: {conversation_id:conversation_id} }, ...(params ? [params] : [])] as const

export type ListMessagesQueryKey = ReturnType<typeof listMessagesQueryKey>

export function listMessagesQueryOptions(conversation_id: ListMessagesPathParams["conversation_id"], params?: ListMessagesQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listMessagesQueryKey(conversation_id, params)
  return queryOptions<ListMessagesQueryResponse, ResponseErrorConfig<ListMessages422>, ListMessagesQueryResponse, typeof queryKey>({
   enabled: !!(conversation_id),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listMessages(conversation_id, params, config)
   },
  })
}

/**
 * @summary List Messages
 * {@link /conversations/:conversation_id/messages/}
 */
export function useListMessages<TData = ListMessagesQueryResponse, TQueryData = ListMessagesQueryResponse, TQueryKey extends QueryKey = ListMessagesQueryKey>(conversation_id: ListMessagesPathParams["conversation_id"], params?: ListMessagesQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<ListMessagesQueryResponse, ResponseErrorConfig<ListMessages422>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listMessagesQueryKey(conversation_id, params)

  const query = useQuery({
   ...listMessagesQueryOptions(conversation_id, params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<ListMessages422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}