/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { ListConversationsQueryResponse, ListConversationsQueryParams, ListConversations422 } from "../types/ListConversations.ts";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { listConversations } from "../client/listConversations.ts";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const listConversationsSuspenseQueryKey = (params?: ListConversationsQueryParams) => [{ url: '/conversations/' }, ...(params ? [params] : [])] as const

export type ListConversationsSuspenseQueryKey = ReturnType<typeof listConversationsSuspenseQueryKey>

export function listConversationsSuspenseQueryOptions(params?: ListConversationsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listConversationsSuspenseQueryKey(params)
  return queryOptions<ListConversationsQueryResponse, ResponseErrorConfig<ListConversations422>, ListConversationsQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listConversations(params, config)
   },
  })
}

/**
 * @summary List Conversations
 * {@link /conversations/}
 */
export function useListConversationsSuspense<TData = ListConversationsQueryResponse, TQueryKey extends QueryKey = ListConversationsSuspenseQueryKey>(params?: ListConversationsQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<ListConversationsQueryResponse, ResponseErrorConfig<ListConversations422>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listConversationsSuspenseQueryKey(params)

  const query = useSuspenseQuery({
   ...listConversationsSuspenseQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListConversations422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}