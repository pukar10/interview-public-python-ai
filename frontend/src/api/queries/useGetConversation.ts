/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { GetConversationQueryResponse, GetConversationPathParams, GetConversation422 } from "../types/GetConversation.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { getConversation } from "../client/getConversation.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getConversationQueryKey = (conversation_id: GetConversationPathParams["conversation_id"]) => [{ url: '/conversations/:conversation_id', params: {conversation_id:conversation_id} }] as const

export type GetConversationQueryKey = ReturnType<typeof getConversationQueryKey>

export function getConversationQueryOptions(conversation_id: GetConversationPathParams["conversation_id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getConversationQueryKey(conversation_id)
  return queryOptions<GetConversationQueryResponse, ResponseErrorConfig<GetConversation422>, GetConversationQueryResponse, typeof queryKey>({
   enabled: !!(conversation_id),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return getConversation(conversation_id, config)
   },
  })
}

/**
 * @summary Get Conversation
 * {@link /conversations/:conversation_id}
 */
export function useGetConversation<TData = GetConversationQueryResponse, TQueryData = GetConversationQueryResponse, TQueryKey extends QueryKey = GetConversationQueryKey>(conversation_id: GetConversationPathParams["conversation_id"], options: 
{
  query?: Partial<QueryObserverOptions<GetConversationQueryResponse, ResponseErrorConfig<GetConversation422>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getConversationQueryKey(conversation_id)

  const query = useQuery({
   ...getConversationQueryOptions(conversation_id, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<GetConversation422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}