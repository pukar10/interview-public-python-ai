/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { DeleteMessageMutationResponse, DeleteMessagePathParams, DeleteMessage422 } from "../types/DeleteMessage.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { deleteMessage } from "../client/deleteMessage.ts";
import { useMutation } from "@tanstack/react-query";

export const deleteMessageMutationKey = () => [{ url: '/conversations/:conversation_id/messages/:message_id' }] as const

export type DeleteMessageMutationKey = ReturnType<typeof deleteMessageMutationKey>

/**
 * @summary Delete Message
 * {@link /conversations/:conversation_id/messages/:message_id}
 */
export function useDeleteMessage<TContext>(options: 
{
  mutation?: UseMutationOptions<DeleteMessageMutationResponse, ResponseErrorConfig<DeleteMessage422>, {conversation_id: DeleteMessagePathParams["conversation_id"], message_id: DeleteMessagePathParams["message_id"]}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? deleteMessageMutationKey()

  return useMutation<DeleteMessageMutationResponse, ResponseErrorConfig<DeleteMessage422>, {conversation_id: DeleteMessagePathParams["conversation_id"], message_id: DeleteMessagePathParams["message_id"]}, TContext>({
    mutationFn: async({ conversation_id, message_id }) => {
      return deleteMessage(conversation_id, message_id, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}