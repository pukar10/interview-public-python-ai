/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { RootGetQueryResponse } from "../types/RootGet.ts";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import { rootGet } from "../client/rootGet.ts";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const rootGetSuspenseQueryKey = () => [{ url: '/' }] as const

export type RootGetSuspenseQueryKey = ReturnType<typeof rootGetSuspenseQueryKey>

export function rootGetSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = rootGetSuspenseQueryKey()
  return queryOptions<RootGetQueryResponse, ResponseErrorConfig<Error>, RootGetQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return rootGet(config)
   },
  })
}

/**
 * @summary Root
 * {@link /}
 */
export function useRootGetSuspense<TData = RootGetQueryResponse, TQueryKey extends QueryKey = RootGetSuspenseQueryKey>(options: 
{
  query?: Partial<UseSuspenseQueryOptions<RootGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? rootGetSuspenseQueryKey()

  const query = useSuspenseQuery({
   ...rootGetSuspenseQueryOptions(config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}