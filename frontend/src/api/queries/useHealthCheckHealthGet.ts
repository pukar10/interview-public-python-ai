/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { HealthCheckHealthGetQueryResponse } from "../types/HealthCheckHealthGet.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { healthCheckHealthGet } from "../client/healthCheckHealthGet.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const healthCheckHealthGetQueryKey = () => [{ url: '/health' }] as const

export type HealthCheckHealthGetQueryKey = ReturnType<typeof healthCheckHealthGetQueryKey>

export function healthCheckHealthGetQueryOptions(config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = healthCheckHealthGetQueryKey()
  return queryOptions<HealthCheckHealthGetQueryResponse, ResponseErrorConfig<Error>, HealthCheckHealthGetQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return healthCheckHealthGet(config)
   },
  })
}

/**
 * @summary Health Check
 * {@link /health}
 */
export function useHealthCheckHealthGet<TData = HealthCheckHealthGetQueryResponse, TQueryData = HealthCheckHealthGetQueryResponse, TQueryKey extends QueryKey = HealthCheckHealthGetQueryKey>(options: 
{
  query?: Partial<QueryObserverOptions<HealthCheckHealthGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? healthCheckHealthGetQueryKey()

  const query = useQuery({
   ...healthCheckHealthGetQueryOptions(config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}