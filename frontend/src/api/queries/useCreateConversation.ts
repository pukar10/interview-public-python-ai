/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { CreateConversationMutationRequest, CreateConversationMutationResponse, CreateConversation422 } from "../types/CreateConversation.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { createConversation } from "../client/createConversation.ts";
import { useMutation } from "@tanstack/react-query";

export const createConversationMutationKey = () => [{ url: '/conversations/' }] as const

export type CreateConversationMutationKey = ReturnType<typeof createConversationMutationKey>

/**
 * @summary Create Conversation
 * {@link /conversations/}
 */
export function useCreateConversation<TContext>(options: 
{
  mutation?: UseMutationOptions<CreateConversationMutationResponse, ResponseErrorConfig<CreateConversation422>, {data?: CreateConversationMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<CreateConversationMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createConversationMutationKey()

  return useMutation<CreateConversationMutationResponse, ResponseErrorConfig<CreateConversation422>, {data?: CreateConversationMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return createConversation(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}