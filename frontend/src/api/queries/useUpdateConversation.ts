/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { UpdateConversationMutationRequest, UpdateConversationMutationResponse, UpdateConversationPathParams, UpdateConversation422 } from "../types/UpdateConversation.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { updateConversation } from "../client/updateConversation.ts";
import { useMutation } from "@tanstack/react-query";

export const updateConversationMutationKey = () => [{ url: '/conversations/:conversation_id' }] as const

export type UpdateConversationMutationKey = ReturnType<typeof updateConversationMutationKey>

/**
 * @summary Update Conversation
 * {@link /conversations/:conversation_id}
 */
export function useUpdateConversation<TContext>(options: 
{
  mutation?: UseMutationOptions<UpdateConversationMutationResponse, ResponseErrorConfig<UpdateConversation422>, {conversation_id: UpdateConversationPathParams["conversation_id"], data?: UpdateConversationMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<UpdateConversationMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? updateConversationMutationKey()

  return useMutation<UpdateConversationMutationResponse, ResponseErrorConfig<UpdateConversation422>, {conversation_id: UpdateConversationPathParams["conversation_id"], data?: UpdateConversationMutationRequest}, TContext>({
    mutationFn: async({ conversation_id, data }) => {
      return updateConversation(conversation_id, data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}