/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { GetMessageQueryResponse, GetMessagePathParams, GetMessage422 } from "../types/GetMessage.ts";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import { getMessage } from "../client/getMessage.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const getMessageQueryKey = (conversation_id: GetMessagePathParams["conversation_id"], message_id: GetMessagePathParams["message_id"]) => [{ url: '/conversations/:conversation_id/messages/:message_id', params: {conversation_id:conversation_id,message_id:message_id} }] as const

export type GetMessageQueryKey = ReturnType<typeof getMessageQueryKey>

export function getMessageQueryOptions(conversation_id: GetMessagePathParams["conversation_id"], message_id: GetMessagePathParams["message_id"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = getMessageQueryKey(conversation_id, message_id)
  return queryOptions<GetMessageQueryResponse, ResponseErrorConfig<GetMessage422>, GetMessageQueryResponse, typeof queryKey>({
   enabled: !!(conversation_id&& message_id),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return getMessage(conversation_id, message_id, config)
   },
  })
}

/**
 * @summary Get Message
 * {@link /conversations/:conversation_id/messages/:message_id}
 */
export function useGetMessage<TData = GetMessageQueryResponse, TQueryData = GetMessageQueryResponse, TQueryKey extends QueryKey = GetMessageQueryKey>(conversation_id: GetMessagePathParams["conversation_id"], message_id: GetMessagePathParams["message_id"], options: 
{
  query?: Partial<QueryObserverOptions<GetMessageQueryResponse, ResponseErrorConfig<GetMessage422>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? getMessageQueryKey(conversation_id, message_id)

  const query = useQuery({
   ...getMessageQueryOptions(conversation_id, message_id, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<GetMessage422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}