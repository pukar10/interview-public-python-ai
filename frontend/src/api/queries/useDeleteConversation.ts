/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { DeleteConversationMutationResponse, DeleteConversationPathParams, DeleteConversation422 } from "../types/DeleteConversation.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { deleteConversation } from "../client/deleteConversation.ts";
import { useMutation } from "@tanstack/react-query";

export const deleteConversationMutationKey = () => [{ url: '/conversations/:conversation_id' }] as const

export type DeleteConversationMutationKey = ReturnType<typeof deleteConversationMutationKey>

/**
 * @summary Delete Conversation
 * {@link /conversations/:conversation_id}
 */
export function useDeleteConversation<TContext>(options: 
{
  mutation?: UseMutationOptions<DeleteConversationMutationResponse, ResponseErrorConfig<DeleteConversation422>, {conversation_id: DeleteConversationPathParams["conversation_id"]}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? deleteConversationMutationKey()

  return useMutation<DeleteConversationMutationResponse, ResponseErrorConfig<DeleteConversation422>, {conversation_id: DeleteConversationPathParams["conversation_id"]}, TContext>({
    mutationFn: async({ conversation_id }) => {
      return deleteConversation(conversation_id, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}