/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { CreateMessageMutationRequest, CreateMessageMutationResponse, CreateMessagePathParams, CreateMessage422 } from "../types/CreateMessage.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { createMessage } from "../client/createMessage.ts";
import { useMutation } from "@tanstack/react-query";

export const createMessageMutationKey = () => [{ url: '/conversations/:conversation_id/messages/' }] as const

export type CreateMessageMutationKey = ReturnType<typeof createMessageMutationKey>

/**
 * @summary Create Message
 * {@link /conversations/:conversation_id/messages/}
 */
export function useCreateMessage<TContext>(options: 
{
  mutation?: UseMutationOptions<CreateMessageMutationResponse, ResponseErrorConfig<CreateMessage422>, {conversation_id: CreateMessagePathParams["conversation_id"], data: CreateMessageMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<CreateMessageMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createMessageMutationKey()

  return useMutation<CreateMessageMutationResponse, ResponseErrorConfig<CreateMessage422>, {conversation_id: CreateMessagePathParams["conversation_id"], data: CreateMessageMutationRequest}, TContext>({
    mutationFn: async({ conversation_id, data }) => {
      return createMessage(conversation_id, data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}