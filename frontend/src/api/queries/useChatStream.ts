/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "../../lib/axios-instance";
import type { RequestConfig, ResponseErrorConfig } from "../../lib/axios-instance";
import type { ChatStreamMutationRequest, ChatStreamMutationResponse, ChatStream422 } from "../types/ChatStream.ts";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import { chatStream } from "../client/chatStream.ts";
import { useMutation } from "@tanstack/react-query";

export const chatStreamMutationKey = () => [{ url: '/chat/' }] as const

export type ChatStreamMutationKey = ReturnType<typeof chatStreamMutationKey>

/**
 * @summary Chat Stream
 * {@link /chat/}
 */
export function useChatStream<TContext>(options: 
{
  mutation?: UseMutationOptions<ChatStreamMutationResponse, ResponseErrorConfig<ChatStream422>, {data: ChatStreamMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ChatStreamMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? chatStreamMutationKey()

  return useMutation<ChatStreamMutationResponse, ResponseErrorConfig<ChatStream422>, {data: ChatStreamMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return chatStream(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}